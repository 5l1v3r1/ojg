
----------------
- next/todo
 - regex op =~
 - FIN
 - cmd/oj
  - read args from file (FIN format)
   - also check ~/.oj.fin or ~/.oj - graphql emacs mode works well
  - palette in cfg file
  - build or restructure json
   - use a template based approach along with JSONPath

- much later
 - scripts [(@.length-1)]
  - decide what functions are actually useful if any

-------------
- cmd/oj
  -colors list of colors or maybe map?
   -p (palette) key=red
   -key red

-------------
- Flexible Information Notation for command line and lazy data entry
 - spec
  - aspects of JSON and GraphQL
  - keys or any value does not need quotes unless they have syntax or space characters
  - space or characters to ignore are space and below as well comma
  - { starts object which is closed by }
  - [ starts object which is closed by ]
  - : separates key from value
  - " or ' allowed
  - \n in string is okay
  - \ is the escape character
  - # comments are allowed
  - all JSON types but also time
 - parser to simple
 - writer
 - spec page in /docs/fin_spec.md


------------------

- Match a JavaScript regular expression. For example, [?(@.description =~ /cat.*/i)]
- Exists syntax? [?(@.x exists)]

-----------------------------------
- parse methods attempted
 - tried functions instead of switch, slower
  - tried array of 256 functions for value switching
 - all in one function is fastest
 - col++ created overhead as well
