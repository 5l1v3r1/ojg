
- gen should have it's own parser, copy

- make oj subdir
 - oj
  - tt
  - gen
  - jp

- use cases
 - parse - either ok
 - mods - gen is safer if that matters
 - get and convert to type - either
  - with simple reflect to go into objects
 - using object based API for gen
  - simple uses func calls instead
  - style really


 - move simple into oj
 - make gen an object based view of the same functions as oj

- complete simple docs for decompose and recompose

- AttrSetter
 - SetAttr or AttrSet
 - use instead of reflection if supported
 - separate for simple and gen? - *just in simple*

- walk each type in recomposer to register sub-types if not already reistered

- examples

- complete gen package

- Parse
 - try using arrayStack instead of stack, will need to use -1 for obj

- Write

- ojg/doc.go
 - JSON tools
 - different approach than go json
  - interface{} the same, referred to as simple type
  - also generic data, not to be confused with golang discussions
   - types elements to match JSON, if it is allowed as an elemtn it will write to JSON
   - light weight with very low memory and performance impact
  - go json relies on decoration on fixed structs with no support for interface elements
   - borrowing from Oj for Ruby, types can be encoded and later recomposed
   - OjG supports multiple docs in one string or stream
  - includes builders for simple and generic
  - JSON path on generic and simple
  - validator


- ojg.Write and String tests

 - different tolerant options
  - comma tolerant (optional)
  - key quote optional
 - function map for creating objects from maps { "^O": "My-Type", "attr1": 123 }
  - maybe just a list of objects then use reflection
  - map[interface{}]func(map[string]interface{}) (interface{}, error)

  - if nil func then use reflection

- Path


- jp - https://goessner.net/articles/JsonPath
 - jp.Str(n gd.Node, path string, defVal string) string
  - same on path expression or element or *fragment*
	// Get(key string) []Node
	// GetFirst(key string) Node
	// Set(path string, val Node) error
	// SetFirst(path string, val Node) error
	// Remove(key string) []Node
	// RemoveFirst(key string) Node
 - current - @
 - child - .foo
 - wildcard - .* or in array/subscript [*]
 - decendent (recursive) - ..
 - filter - [?()]
  - include || and &&, ==, !=, <=, >= <, >, (=~ for regex)
  - strings can be "" or ''
 - slice - [start:end:step]
 - union - [,]

Match a JavaScript regular expression. For example, [?(@.description =~ /cat.*/i)] matches items whose description starts with cat (case-insensitive).

Use to negate a filter: [?(!@.isbn)] matches items that do not have the isbn property.

- how to handle things in []
 - maybe [] is a check for an array/subscript
  - then things to do on the array elements after that
   - so ArrayStart expr followed by filter, slice, etc then terminated with an arrayEnd

- jp.Expr
 - has all top level funcs
 - []Frag
 - bracketed bool
 - Get
  - calls get() on first frag with array of rest
   - goes to next in array

- jp.Frag
 - get
 - first
 - set
 - setOne
 - remove
 - removeFirst

- parse methods
 - tried functions instead of switch, slower
  - tried array of 256 functions for value switching
 - all in one function is fastest
 - col++ created overhead as well
